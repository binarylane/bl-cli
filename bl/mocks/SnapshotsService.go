// Code generated by MockGen. DO NOT EDIT.
// Source: snapshots.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	bl "git.mammoth.com.au/github/bl-cli/bl"
	gomock "github.com/golang/mock/gomock"
)

// MockSnapshotsService is a mock of SnapshotsService interface.
type MockSnapshotsService struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotsServiceMockRecorder
}

// MockSnapshotsServiceMockRecorder is the mock recorder for MockSnapshotsService.
type MockSnapshotsServiceMockRecorder struct {
	mock *MockSnapshotsService
}

// NewMockSnapshotsService creates a new mock instance.
func NewMockSnapshotsService(ctrl *gomock.Controller) *MockSnapshotsService {
	mock := &MockSnapshotsService{ctrl: ctrl}
	mock.recorder = &MockSnapshotsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotsService) EXPECT() *MockSnapshotsServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockSnapshotsService) List() (bl.Snapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(bl.Snapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSnapshotsServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSnapshotsService)(nil).List))
}

// ListVolume mocks base method.
func (m *MockSnapshotsService) ListVolume() (bl.Snapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolume")
	ret0, _ := ret[0].(bl.Snapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolume indicates an expected call of ListVolume.
func (mr *MockSnapshotsServiceMockRecorder) ListVolume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolume", reflect.TypeOf((*MockSnapshotsService)(nil).ListVolume))
}

// ListServer mocks base method.
func (m *MockSnapshotsService) ListServer() (bl.Snapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServer")
	ret0, _ := ret[0].(bl.Snapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServer indicates an expected call of ListServer.
func (mr *MockSnapshotsServiceMockRecorder) ListServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServer", reflect.TypeOf((*MockSnapshotsService)(nil).ListServer))
}

// Get mocks base method.
func (m *MockSnapshotsService) Get(arg0 string) (*bl.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*bl.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSnapshotsServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSnapshotsService)(nil).Get), arg0)
}

// Delete mocks base method.
func (m *MockSnapshotsService) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSnapshotsServiceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSnapshotsService)(nil).Delete), arg0)
}
